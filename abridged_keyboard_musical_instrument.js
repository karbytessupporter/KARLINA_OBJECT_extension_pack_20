/**
 * file: abridged_keyboard_musical_instrument.js
 * type: JavaScript
 * author: karbytes
 * date: 11_SEPTEMBER_2024
 * license: PUBLIC_DOMAIN
 */

/** starter code generated by ChatGPT-4o on 11_SEPTEMBER_2024 */

// Create an audio context
const audioContext = new (window.AudioContext || window.webkitAudioContext)();

// Frequency for all whole notes in ascending order (C major scale across multiple octaves)
const noteFrequencies = {
  'z': 130.81,  // C3
  'x': 146.83,  // D3
  'c': 164.81,  // E3
  'v': 174.61,  // F3
  'b': 196.00,  // G3
  'n': 220.00,  // A3
  'm': 246.94,  // B3
  ',': 261.63,  // C4 (Middle C)
  '.': 293.66,  // D4
  '/': 329.63,  // E4
  'a': 349.23,  // F4
  's': 392.00,  // G4
  'd': 440.00,  // A4
  'f': 493.88,  // B4
  'g': 523.25,  // C5
  'h': 587.33,  // D5
  'j': 659.25,  // E5
  'k': 698.46,  // F5
  'l': 783.99,  // G5
  ';': 880.00,  // A5
  'q': 987.77,  // B5
  'w': 1046.50, // C6
};

// Create UI for the keyboard
const keyboardDiv = document.getElementById('keyboard');

// Function to create key elements dynamically
function createKeyUI(key) {
  const keyDiv = document.createElement('div');
  keyDiv.classList.add('key');
  keyDiv.textContent = key.toUpperCase();
  keyDiv.id = key;
  keyboardDiv.appendChild(keyDiv);
}

// Add keys in ascending note order
Object.keys(noteFrequencies).forEach(createKeyUI);

// Function to play a note
function playNote(frequency) {
  const oscillator = audioContext.createOscillator();
  const gainNode = audioContext.createGain();

  oscillator.type = 'sine';
  oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
  gainNode.gain.setValueAtTime(0.5, audioContext.currentTime);

  oscillator.connect(gainNode);
  gainNode.connect(audioContext.destination);

  oscillator.start();
  oscillator.stop(audioContext.currentTime + 0.5);  // Stop after 0.5 seconds
}

// Handle keydown event
document.addEventListener('keydown', (event) => {
  const key = event.key.toLowerCase();
  if (noteFrequencies[key]) {
    playNote(noteFrequencies[key]);

    // Add visual feedback to the key
    const keyDiv = document.getElementById(key);
    if (keyDiv) {
      keyDiv.classList.add('pressed');
    }
  }
});

// Handle keyup event to remove visual feedback
document.addEventListener('keyup', (event) => {
  const key = event.key.toLowerCase();
  const keyDiv = document.getElementById(key);
  if (keyDiv) {
    keyDiv.classList.remove('pressed');
  }
});
